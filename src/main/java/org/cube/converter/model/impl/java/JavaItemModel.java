package org.cube.converter.model.impl.java;

import lombok.Getter;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import lombok.Setter;
import org.cube.converter.model.element.Cube;
import org.cube.converter.model.element.Parent;
import org.cube.converter.model.GeneralModel;
import org.cube.converter.util.element.Direction;
import org.cube.converter.util.element.Position2V;
import org.cube.converter.util.element.Position3V;

import java.util.List;
import java.util.Map;

@Getter
@Setter
public final class JavaItemModel extends GeneralModel {
    private final String texture;
    private double scale = 1;

    public JavaItemModel(final String texture, final Position2V textureSize) {
        super(textureSize);
        this.texture = texture;
    }

    public JsonObject compile() {
        final JsonObject json = new JsonObject();
        json.addProperty("credit", "Generated by CubeConverter");
        json.add("texture_size", this.textureSize.toJson());

        // Textures.
        final JsonObject textures = new JsonObject();
        textures.addProperty("0", this.texture);
        json.add("textures", textures);

        final JsonArray elements = new JsonArray();
        final JsonArray groups = new JsonArray();

        for (Parent group : this.getParents()) {
            final JsonObject parent = new JsonObject();
            parent.addProperty("name", group.getName());
            parent.add("origin", group.getPivot().withJavaOffset().toJson());
            parent.addProperty("color", 0);

            // Children.
            final JsonArray children = new JsonArray();
            group.getCubes().forEach((k, v) -> children.add(k));
            parent.add("children", children);

            for (Map.Entry<Integer, Cube> entry : group.getCubes().entrySet()) {
                final Cube cube = entry.getValue();

                final JsonObject element = new JsonObject();
                // TODO: name, well it is that important? I don't care enough.
                element.addProperty("name", cube.hashCode());

                final Position3V from = cube.getPosition().asJavaPosition(cube.getSize());
                element.add("from", from.toJson());
                element.add("to", from.add(cube.getSize()).toJson());
                element.add("rotation", compileAxis(cube));
                element.add("faces", compileUV(this.textureSize.getX(), this.textureSize.getY(), cube));
                elements.add(element);
            }

            groups.add(parent);
        }

        json.add("elements", elements);
        json.add("groups", groups);

        return json;
    }

    private JsonObject compileAxis(final Cube cube) {
        final Position3V rotation = cube.getRotation();

        final JsonObject object = new JsonObject();
        object.addProperty("angle", rotation.getX() != 0 ? rotation.getX() : rotation.getY() != 0 ? rotation.getY() : rotation.getZ());
        object.addProperty("axis", cube.getAxis());
        object.add("origin", cube.getPivot().withJavaOffset().toJson());

        return object;
    }

    private JsonObject compileUV(final double textureWidth, final double textureHeight, final Cube element) {
        JsonObject faces = new JsonObject();

        for (Map.Entry<Direction, Double[]> entry : element.getUvMap().toJavaPerfaceUV(textureWidth, textureHeight).getMap().entrySet()) {
            if (entry.getValue() == null) {
                continue;
            }

            final JsonObject faceDirection = new JsonObject();
            final JsonArray array = new JsonArray();
            array.add(entry.getValue()[0]);
            array.add(entry.getValue()[1]);
            array.add(entry.getValue()[2]);
            array.add(entry.getValue()[3]);

            faceDirection.add("uv", array);
            faceDirection.addProperty("texture", "#0");

            faces.add(entry.getKey().name().toLowerCase(), faceDirection);
        }

        if (faces.isEmpty()) {
            final JsonObject face = new JsonObject();
            final JsonArray array = new JsonArray();
            List.of(0, 0, 0, 0).forEach(array::add);

            face.add("uv", array);
            face.addProperty("texture", "#0");
            faces.add("down", face);
        }

        return faces;
    }

    public static JavaItemModel fromJson(JsonObject object) {
        // TODO: implement this.
        return null;
    }
}